trigger:
  branches:
    include:
      - feature3-python
pool:
  vmImage: 'ubuntu-latest'
variables:
  # stored both in azure devops secrets
  DOCKERHUB_USERNAME: $(DOCKERHUB_USERNAME)  
  DOCKERHUB_PASSWORD: $(DOCKERHUB_PASSWORD) 
  IMAGE_NAME: 'ackermaster/flask-aws-monitor-azure'
  IMAGE_TAG: $(Build.BuildId)
stages:
- stage: CloneRepository
  displayName: 'Clone Repository'
  jobs:
  - job: Clone
    steps:
    - checkout: self
      ref: feature3-python # TODO: change to main after making sure all works 
- stage: ParallelChecks
  displayName: 'Parallel Linting & Security Checks'
  dependsOn: CloneRepository
  jobs:
  - job: Linting
    displayName: 'Linting'
    steps:
    # MOCK lint to check that the other things work
    - script: |
        echo "Running linting for Python, Shell, and Dockerfile"
      displayName: 'Run Linting'
  - job: SecurityScan
    displayName: 'Security Scanning'
    steps:
    # MOCK scan to check that the other things work
    - script: |
        echo "Running security scanning for dependencies and container security"
      displayName: 'Run Security Scan'
# building the correct image based on our app
- stage: BuildDockerImage
  displayName: 'Build Docker Image'
  dependsOn: ParallelChecks
  jobs:
  - job: BuildImage
    steps:
    - script: |
        cd python-files
        docker build -t $(IMAGE_NAME):$(IMAGE_TAG) .
        docker tag $(IMAGE_NAME):$(IMAGE_TAG) $(IMAGE_NAME):latest
      displayName: 'Build and Tag Docker Image'
# logining to dockerhub using the creds and pushing the image
- stage: PushToDockerHub
  displayName: 'Push Docker Image to Docker Hub'
  dependsOn: BuildDockerImage
  jobs:
  - job: PushImage
    steps:
    - script: |
        echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
        docker push $(IMAGE_NAME):$(IMAGE_TAG)
        docker push $(IMAGE_NAME):latest
      displayName: 'Push Docker Image to Docker Hub'
- stage: SecureCredentials
  displayName: 'Store and Use Secure Credentials'
  dependsOn: []  
  jobs:
  - job: StoreSecrets
    displayName: 'Ensure Credentials are Secure'
    steps:
    # MOCK echos for checking credentials are secure.
    # i located them in variables in the pipeline
    - script: |
        echo "Credentials are stored securely in Azure DevOps secrets"
        echo "Using DOCKERHUB_USERNAME and DOCKERHUB_PASSWORD variables"
      displayName: 'Secure Credential Storage'